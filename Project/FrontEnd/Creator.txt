import { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Questions.css";

function Questions() {
  const [questionList, setQuestionList] = useState([]);
  const navigate = useNavigate();

  var getQuestions = () => {
    fetch("http://localhost:5057/api/Questions/getAll", {
      method: "GET",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
    })
      .then(async (data) => {
        var myData = await data.json();
        await console.log(myData);
        await setQuestionList(myData);
      })
      .catch((e) => {
        console.log(e);
      });
  };

  const handleDelete = async (questionId) => {
    // Display a confirmation dialog
    const userConfirmed = window.confirm(
      `Do you really want to delete the question with ID ${questionId}?`
    );

    // If user confirms, proceed with deletion
    if (userConfirmed) {
      // Perform deletion logic here
      console.log(`Deleting question with ID ${questionId}`);

      // Update the questionList state (simulate deletion)
      setQuestionList((prevQuestions) =>
        prevQuestions.filter((question) => question.questionId !== questionId)
      );
    }
  };

  const addQuestion = () => {
    navigate("/addQuestions");
  };

  const updateQuestion = () => {
    navigate("/updateQuestions");
  };

  var checkQuestions = questionList.length > 0 ? true : false;

  return (
    <div className="question">
      <h1 className="alert alert-success">Questions</h1>
      <button className="btn btn-success" onClick={getQuestions}>
        Get All Questions
      </button>
      <button className="btn btn-primary" onClick={addQuestion}>
        Add Question
      </button>
      <button className="btn btn-update" onClick={updateQuestion}>
        Update Question
      </button>
      <hr />
      {checkQuestions ? (
        <div>
          {questionList.map((question) => (
            <div key={question.questionId} className="alert alert-success">
              Question ID: {question.questionId}
              <button
                className="btn btn-delete"
                onClick={() => handleDelete(question.questionId)}
              >
                Delete
              </button>
              <br />
              Question: {question.questionTxt}
              <br />
              Option A: {question.option1}
              <br />
              Option B: {question.option2}
              <br />
              Option C: {question.option3}
              <br />
              Option D: {question.option4}
              <br />
              Quiz ID: {question.quizId}
            </div>
          ))}
        </div>
      ) : (
        <div>No questions available yet</div>
      )}
    </div>
  );
}

export default Questions;


using QuizApp.Interfaces;
using QuizApp.Models;
using QuizApp.Models.DTOs;
using System.Security.Cryptography;
using System.Text;
namespace QuizApp.Services
{
    public class UserService : IUserService
    {
        private readonly IRepository<string, User> _repository;
        private readonly ITokenService _tokenService;

        public UserService(IRepository<string, User> repository, ITokenService tokenService)
        {
            _repository = repository;
            _tokenService = tokenService;
        }
        public UserDTO Login(UserDTO userDTO)
        {
            var user = _repository.GetById(userDTO.Username);
            if (user != null)
            {
                HMACSHA512 hmac = new HMACSHA512(user.Key);
                var userpass = hmac.ComputeHash(Encoding.UTF8.GetBytes(userDTO.Password));
                for (int i = 0; i < userpass.Length; i++)
                {
                    if (user.Password[i] != userpass[i])
                        return null;
                }
                userDTO.Token = _tokenService.GetToken(userDTO);
                userDTO.Password = "";
                return userDTO;
            }
            return null;
        }

        public UserDTO Register(UserDTO userDTO)
        {
            HMACSHA512 hmac = new HMACSHA512();
            User user = new User()
            {
                Username = userDTO.Username,
                Password = hmac.ComputeHash(Encoding.UTF8.GetBytes(userDTO.Password)),
                Key = hmac.Key,
                Role = userDTO.Role
            };
            var result = _repository.Add(user);
            if (result != null)
            {
                userDTO.Password = "";
                return userDTO;
            }
            return null;

        }

    }
}


import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter as Router } from 'react-router-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { Provider } from 'react-redux';  // Import the Provider component
import quizStore from './QuizStore';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={quizStore}>  {/* Use 'store' instead of 'quizStore' */}
    <App />
  </Provider>,
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


import { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";

function QuestionsByQuizId() {
  const [questionList, setQuestionList] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState(null);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    if (location.state && location.state.quizId) {
      checkQuizCompletion(location.state.quizId);
      getQuestionsByQuizId(location.state.quizId);
    }
  }, [location.state]);

  const checkQuizCompletion = (quizId) => {
    const username = localStorage.getItem("username");

    fetch(`http://localhost:5057/api/QuizResult/results-with-total-score/${username}/${quizId}`)
      .then(async (response) => {
        const data = await response.json();

        if (data.quizResults.length > 0) {
          alert("You have already completed this quiz. Multiple attempts are not allowed.");
          navigate("/quizs");
        } else {
          getQuestionsByQuizId(quizId);
        }
      })
      .catch((error) => console.error("Error checking quiz completion:", error));
  };

  const getQuestionsByQuizId = (quizId) => {
    if (quizCompleted) {
      alert("You have already completed this quiz. Multiple attempts are not allowed.");
      navigate("/quizs");
    } else {
      fetch(`http://localhost:5057/api/Questions/byquiz/${quizId}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      })
        .then(async (data) => {
          var myData = await data.json();
          setQuestionList(myData);
        })
        .catch((e) => {
          console.log(e);
        });
    }
  };

  const handleOptionChange = (option) => {
    setSelectedOption(option);
  };

  

  const handleEvaluate = () => {
    if (location.state.quizId && localStorage.getItem("username") && questionList.length > 0) {
      const optionIndex = ['A', 'B', 'C', 'D'].indexOf(selectedOption);
      const userAnswerValue = questionList[currentQuestionIndex][`option${optionIndex + 1}`];

      const evaluationData = {
        quizId: parseInt(location.state.quizId),
        username: localStorage.getItem("username"),
        questionId: questionList[currentQuestionIndex].questionId,
        userAnswer: userAnswerValue,
      };

      fetch(`http://localhost:5057/api/Quiz/evaluate/${location.state.quizId}`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(evaluationData),
      })
        .then(async (response) => {
          const data = await response.json();
          if (currentQuestionIndex + 1 < questionList.length) {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
            setSelectedOption(null);
          } else {
            navigate("/quizresult", {
              state: {
                username: localStorage.getItem("username"),
                quizId: location.state.quizId,
              },
            });
          }
        })
        .catch((error) => console.error('Error evaluating quiz:', error));
    } else {
      alert('Please provide all required fields.');
    }
  };

  return (
    <div className="inputcontainer">
      <h1 className="alert alert-success">QuestionsByQuizId</h1>
      {questionList.length > 0 && currentQuestionIndex < questionList.length ? (
        <div>
          <div className="alert alert-success">
            Question: {questionList[currentQuestionIndex].questionTxt}
          </div>
          <form>
            {['A', 'B', 'C', 'D'].map((option, index) => (
              <div key={index} className="form-check">
                <input
                  type="radio"
                  id={`option${index}`}
                  name="options"
                  value={option}
                  checked={selectedOption === option}
                  onChange={() => handleOptionChange(option)}
                  className="form-check-input"
                />
                <label htmlFor={`option${index}`} className="form-check-label">
                  {option}: {questionList[currentQuestionIndex][`option${index + 1}`]}
                </label>
              </div>
            ))}
          </form>
          <button className="btn btn-primary" onClick={handleEvaluate}>
            Next
          </button>
        </div>
      ) : (
        <div>
          {questionList.length === 0 ? (
            <p>No questions available for this quiz.</p>
          ) : (
            <p>No more questions available.</p>
          )}
        </div>
      )}
    </div>
  );
}

export default QuestionsByQuizId;



import axios from "axios";
import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";

function UpdateQuestion() {
  const location = useLocation();
  const [questionId, setQuestionId] = useState("");
  const [questionTxt, setQuestionTxt] = useState("");
  const [option1, setOption1] = useState("");
  const [option2, setOption2] = useState("");
  const [option3, setOption3] = useState("");
  const [option4, setOption4] = useState("");
  const [answer, setAnswer] = useState("");
  const [quizId, setQuizId] = useState("");
  useEffect(() => {
    // Set the questionId from location state if available
    if (location.state && location.state.questionId) {
      setQuestionId(location.state.questionId);
    }
  }, [location.state]);

  const clickUpdate = () => {
    if (!quizId || !questionId) {
      alert('Quiz ID and Question ID are required for updating.');
      return;
    }
  
    const updatedQuestion = {
      questionId,
      questionTxt,
      option1,
      option2,
      option3,
      option4,
      answer,
      quizId,
    };
  
    axios.put(`http://localhost:5057/api/Questions/update`, updatedQuestion)
      .then(() => {
        alert('Question Updated');
      })
      .catch((e) => {
        console.log(e);
      });
  };  

  return (
    <div className="inputcontainer">
      <h1 className="alert alert-success">UpdateQuestion</h1>
      <label className="form-control" htmlFor="questionId">Question ID</label>
      <input id="questionId" type="number" className="form-control" value={questionId} readOnly />

      <label className="form-control" htmlFor="qutxt">Question</label>
      <input id="qutxt" type="text" className="form-control" value={questionTxt} onChange={(e) => setQuestionTxt(e.target.value)} />

      <label className="form-control" htmlFor="quopt1">Option A</label>
      <input id="quopt1" type="text" className="form-control" value={option1} onChange={(e) => setOption1(e.target.value)} />

      <label className="form-control" htmlFor="quopt2">Option B</label>
      <input id="quopt2" type="text" className="form-control" value={option2} onChange={(e) => setOption2(e.target.value)} />

      <label className="form-control" htmlFor="quopt3">Option C</label>
      <input id="quopt3" type="text" className="form-control" value={option3} onChange={(e) => setOption3(e.target.value)} />

      <label className="form-control" htmlFor="quopt4">Option D</label>
      <input id="quopt4" type="text" className="form-control" value={option4} onChange={(e) => setOption4(e.target.value)} />

      <label className="form-control" htmlFor="quans">Answer</label>
      <input id="quans" type="text" className="form-control" value={answer} onChange={(e) => setAnswer(e.target.value)} />

      <label className="form-control" htmlFor="qId">Quiz Id</label>
      <input id="qId" type="number" className="form-control" value={quizId} onChange={(e) => setQuizId(e.target.value)} />

      <button onClick={clickUpdate} className="btn btn-primary">Update Question</button>
    </div>
  );
}

export default UpdateQuestion;

