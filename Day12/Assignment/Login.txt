UserService.CS File:

using Shopping_App.Interfaces;
using Shopping_App.Models;
using Shopping_App.Models.DTOs;
using System.Security.Cryptography;
using System.Text;
namespace Shopping_App.Services
{
    public class UserService : IUserService
    {
        private readonly IRepository<string, User> _repository;

        public UserService(IRepository<string, User> repository)
        {
            _repository = repository;
        }
        public UserDTO Login(UserDTO userDTO)
        {
            var user = _repository.GetById(userDTO.Username);
            if (user != null)
            {
                HMACSHA512 hmac = new HMACSHA512(user.Key);
                var userpass = hmac.ComputeHash(Encoding.UTF8.GetBytes(userDTO.Password));
                for (int i = 0; i < userpass.Length; i++)
                {
                    if (user.Password[i] != userpass[i])
                        return null;
                }
                userDTO.Password = "";
                return userDTO;
            }
            return null;
        }

        public UserDTO Register(UserDTO userDTO)
        {
            HMACSHA512 hmac = new HMACSHA512();
            User user = new User()
            {
                Username = userDTO.Username,
                Password = hmac.ComputeHash(Encoding.UTF8.GetBytes(userDTO.Password)),
                Key = hmac.Key,
                Role = userDTO.Role
            };
            var result = _repository.Add(user);
            if (result != null)
            {
                userDTO.Password = "";
                return userDTO;
            }
            return null;

        }
    }
}

UserContorller.CS File:

using Microsoft.AspNetCore.Mvc;
using Shopping_App.Interfaces;
using Shopping_App.Models.DTOs;

namespace Shopping_App.Controllers
{
    public class UserController : Controller
    {
        private readonly IUserService _userService;

        public UserController(IUserService userService)
        {
            _userService = userService;
        }
        public IActionResult Register()
        {
            return View();
        }
        public IActionResult Login()
        {
            return View();
        }
        [HttpPost]
        public IActionResult Register(UserViewModel viewModel)
        {
            var user = _userService.Register(viewModel);
            if (user != null)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }
        [HttpPost]
        public IActionResult Login(UserViewModel viewModel)
        {
            var user = _userService.Login(viewModel);
            if(user!=null)
            {
                return RedirectToAction("Index", "Home");
            }
            return View();
        }
    }
}

Login.CSHTML File:

@model Shopping_App.Models.User

@{
    ViewData["Title"] = "Login";
}

<h1>Login</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Login">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username" class="control-label"></label>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" type= "password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Login" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

Program.CS File:

using Microsoft.EntityFrameworkCore;
using Shopping_App.Contexts;
using Shopping_App.Interfaces;
using Shopping_App.Models;
using Shopping_App.Repositories;
using Shopping_App.Services;

namespace Shopping_App
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();

            builder.Services.AddDbContext<ShoppingContext>(opts =>
            {
                opts.UseSqlServer(builder.Configuration.GetConnectionString("conn"));
            });
            builder.Services.AddScoped<IRepository<string,User>, UserRepository>();
            builder.Services.AddScoped<IUserService, UserService>();


            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
            }
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            app.Run();
        }
    }
}

OUTPUT:
Goes to the Index page when the username and password are 
Correct.
When the username/password is incorrect the page just 
reloads and displays the same user/login page making the password null.