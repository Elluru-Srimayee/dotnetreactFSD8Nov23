using ClinicModelLibrary;
using ClinicBLLibrary;
using ClinicDALLibrary;

namespace ShoppingApp
{
    internal class Program
    {
        IDoctorService doctorService;
        public Program()
        {
            doctorService = new DoctorService();
        }
        void DisplayAdminMenu()
        {
            Console.WriteLine("1. Add Doctor");
            Console.WriteLine("2. Update Number");
            Console.WriteLine("3. Delete Doctor");
            Console.WriteLine("4. Print All Doctor");
            Console.WriteLine("0. Exit");
        }
        void StartAdminActivities()
        {
            int choice;
            do
            {
                DisplayAdminMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 0:
                        Console.WriteLine("Bye bye");
                        break;
                    case 1:
                        AddDoctor();
                        break;
                    case 2:
                        UpdateNumber();
                        break;
                    case 3:
                        DeleteDoctor();
                        break;
                    case 4:
                        PrintAllDoctors();
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Try again");
                        break;
                }
            } while (choice != 0);
        }
        public void PrintAllDoctors()
        {
            Console.WriteLine("***********************************");
            var doctors = doctorService.GetDoctors();
            foreach (var item in doctors)
            {
                Console.WriteLine(item);
                Console.WriteLine("-------------------------------");
            }
            Console.WriteLine("***********************************");
        }
        void AddDoctor()
        {
            try
            {
                Doctor doctor = TakeDoctorDetails();
                var result = doctorService.AddDoctor(doctor);
                if (result != null)
                {
                    Console.WriteLine("Doctor added");
                }
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);

            }
            catch (NotAddedException e)
            {
                Console.WriteLine(e.Message);
            }

        }
        Doctor TakeDoctorDetails()
        {
            Doctor doctor = new Doctor();
            Console.WriteLine("Please enter the doctor name");
            doctor.Name = Console.ReadLine();
            Console.WriteLine("Please enter the doctor phone number");
            doctor.Phone = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Please enter the doctor Experience");
            doctor.Experience = Convert.ToInt32(Console.ReadLine());
            return doctor;
        }
        int GetDoctorIdFromUser()
        {
            int id;
            Console.WriteLine("Please enter the doctor id");
            id = Convert.ToInt32(Console.ReadLine());
            return id;
        }
        private void DeleteDoctor()
        {
            try
            {
                int id = GetDoctorIdFromUser();
                if (doctorService.Delete(id) != null)
                    Console.WriteLine("Doctor deleted");
            }
            catch (NoSuchDoctorException e)
            {
                Console.WriteLine(e.Message);
            }
        }
        private void UpdateNumber()
        {
            var id = GetDoctorIdFromUser();
            Console.WriteLine("Please enter the new number");
            int number = Convert.ToInt32(Console.ReadLine());
            Doctor doctor = new Doctor();
            doctor.Phone = number;
            doctor.EmployeeId = id;
            try
            {
                var result = doctorService.UpdateDoctorMobile(id, number);
                if (result != null)
                    Console.WriteLine("Update success");
            }
            catch (NoSuchDoctorException e)
            {
                Console.WriteLine(e.Message);
            }
        }
        static int Main(string[] args)
        {
            Program program = new Program();
            program.StartAdminActivities();
            Console.WriteLine("Hello, World!");
            return 0;
        }
    }
}

=======================================================================

using System.Diagnostics;

namespace ClinicModelLibrary
{
    public class Doctor
    {
        public int EmployeeId { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Phone { get; set; }
        public int Experience { get; set; }

        public Doctor(string name, int phone, int experience)
        {
            Name = name;
            Phone = phone;
            Experience = experience;
        }
        public override string ToString()
        {
            return $"Doctor Id : {EmployeeId}\nDoctor Name : {Name}\nDoctor Phone number : {Phone}\nDoctor Experience : {Experience}";
        }
        public Doctor()
        {
        }
    }
}

======================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ClinicModelLibrary;
namespace ClinicDALLibrary
{
    public interface IRepository
    {
        public Doctor Add(Doctor doctor);
        public Doctor Update(Doctor doctor);
        public Doctor Delete(int id);
        public Doctor GetById(int id);
        public List<Doctor> GetAll();
    }
}

=====================================================================

using System.Numerics;
using ClinicModelLibrary;
namespace ClinicDALLibrary
{
    public class DoctorRepository:IRepository
    {
        Dictionary<int, Doctor> doctors = new Dictionary<int, Doctor>();
        int GetNextId()
        {
            if (doctors.Count == 0)
                return 1;
            int id = doctors.Keys.Max();
            return ++id;
        }
        /// <summary>
        /// Adds the given doctor to the dictionary 
        /// </summary>
        /// <param name="doctor"></param>
        /// <returns>The doctor that has been added</returns>
        public Doctor Add(Doctor doctor)
        {
            int id = GetNextId();
            try
            {
                doctor.EmployeeId = id;
                doctors.Add(doctor.EmployeeId, doctor);
                return doctor;
            }
            catch(ArgumentException e)
            {
                Console.WriteLine("The Procuct Id already exists");
                Console.WriteLine(e.Message);
            }
            return null;
        }
        /// <summary>
        /// Deletes the doctor record from the dictionary using the id as key.
        /// </summary>
        /// <param The id of the doctor to be deleted></param>
        /// <returns>The doctor is deleted.</returns>
        public Doctor Delete(int id)
        {
            var doctor = doctors[id];
            doctors.Remove(id);
            return doctor;
        }

        /// <summary>
        /// gets all the values presetn in the dictionary in the form of list.
        /// </summary>
        /// <returns>The list of values in the dictionary.</returns>
        public List<Doctor> GetAll()
        {
            var doctorList = doctors.Values.ToList();
            return doctorList;
        }
        /// <summary>
        /// gets the values of keys in dictionary by using the id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns>The name of the doctor with respective EmployeeId</returns>
        public Doctor GetById(int id)
        {
            return doctors[id];
        }
        /// <summary>
        /// Updates the values in the dictionary using the Employee Id.
        /// </summary>
        /// <param name="doctor"></param>
        /// <returns>The value of the object passed.</returns>
        public Doctor Update(Doctor doctor)
        {
            doctors[doctor.EmployeeId] = doctor;
            return doctors[doctor.EmployeeId];
        }
    }
}

==============================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ClinicModelLibrary;

namespace ClinicBLLibrary
{
    public interface IDoctorService
    {
        public Doctor AddDoctor(Doctor doctor);
        public Doctor UpdateDoctorMobile(int doctorId, int phone);
        public Doctor GetDoctor(int doctorId);
        public List<Doctor> GetDoctors();
        public Doctor UpdateDoctorExperience(int  doctorId, int experience);
        public Doctor Delete(int  doctorId);
    }
}

===============================================================

using ClinicModelLibrary;
using ClinicDALLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClinicBLLibrary
{
    public class DoctorService : IDoctorService
    {
        IRepository repository;
        public DoctorService()
        {
            repository = new DoctorRepository();
        }
        /// <summary>
        /// Adds the doctor to the collection using the repository
        /// </summary>
        /// <param name="doctor"></param>
        /// <returns></returns>
        /// <exception cref="NotAddedException">Employee Id duplicated</exception>
        public Doctor AddDoctor(Doctor doctor)
        {
            var result = repository.Add(doctor);
            if (result != null)
                return result;
            throw new NotAddedException();
        }

        public Doctor Delete(int doctorId)
        {
            var doctor = GetDoctor(doctorId);
            if(doctor!=null)
            {
                repository.Delete(doctorId);
                return doctor;
            }
            throw new NoSuchDoctorException();
        }
        /// <summary>
        /// Returns the product for the given Id
        /// </summary>
        /// <param name="doctorId"></param>
        /// <returns></returns>
        /// <exception cref="NoSuchDoctorException"></exception>
        public Doctor GetDoctor(int doctorId)
        {
            var result = repository.GetById(doctorId);
            return result == null ? throw new NoSuchDoctorException():result;
        }

        public Doctor UpdateDoctorExperience(int doctorId, int experience)
        {
            var doctor = GetDoctor(doctorId);
            if(doctor!=null)
            {
                doctor.Experience = Convert.ToInt32(experience);
                var result = repository.Update(doctor);
                return result;
            }
            throw new NoSuchDoctorException();
        }
        public List<Doctor> GetDoctors()
        {
            var doctors = repository.GetAll();
            if (doctors.Count != 0)
                return doctors;
            throw new NoDoctorAvailableException();
        }

        public Doctor UpdateDoctorMobile(int doctorId, int phone)
        {
            var doctor = GetDoctor(doctorId);
            if (doctor != null)
            {
                doctor.Phone = Convert.ToInt32(phone);
                var result = repository.Update(doctor);
                return result;
            }
            throw new NoSuchDoctorException();
        }
    }
}

===============================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClinicBLLibrary
{
    [Serializable]
    public class NoDoctorAvailableException:Exception
    {
            string message;
            public NoDoctorAvailableException()
            {
                message = "No Doctors are available currently";
            }

            public override string Message => message;
        }
}

=================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClinicBLLibrary
{
    [Serializable]
    public class NoSuchDoctorException:Exception
    {
        string message;
        public NoSuchDoctorException()
        {
            message = "The Doctor with the given Employee Id is not present";
        }
        public override string Message => message;

    }
}

=================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClinicBLLibrary
{
    [Serializable]
    public class NotAddedException:Exception
    {
        string message;
        public NotAddedException()
        {
            message = "Doctor was not addedd.";
        }
        public override string Message => message;

    }
}
